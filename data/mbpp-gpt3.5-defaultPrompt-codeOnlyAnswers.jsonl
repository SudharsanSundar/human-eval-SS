{"task_id": 11, "completion": "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s"}
{"task_id": 12, "completion": "def sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [M[i] for i in sorted_indices]\n    return sorted_matrix"}
{"task_id": 13, "completion": "def count_common(words):\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common()\n    return most_common_words"}
{"task_id": 14, "completion": "def find_volume(l, b, h):\n    volume = 0.5 * l * b * h\n    return volume"}
{"task_id": 15, "completion": "def split_lowerstring(text):\n    result = []\n    current_word = \"\"\n    \n    for char in text:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n    \n    if current_word:\n        result.append(current_word)\n    \n    return result"}
{"task_id": 16, "completion": "def text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 17, "completion": "def square_perimeter(a):\n    perimeter = 4 * a\n    return perimeter"}
{"task_id": 18, "completion": "def str_to_list(string1, string2):\n    # Convert the second string to a set for faster lookup\n    char_set = set(string2)\n    \n    # Filter out characters from the first string that are not in the set\n    result = [char for char in string1 if char not in char_set]\n    \n    return ''.join(result)"}
{"task_id": 19, "completion": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": 20, "completion": "def is_woodall(x):\n    for n in range(1, x):\n        if x == n * 2**n - 1:\n            return True\n    return False"}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(n * i)\n    return multiples"}
{"task_id": 22, "completion": "def find_first_duplicate(nums):\n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return None"}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    max_sum = float('-inf')\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    for digit in reversed(binary):\n        decimal += int(digit) * (2 ** power)\n        power += 1\n    return decimal"}
{"task_id": 25, "completion": "def find_product(arr, n):\n    product = 1\n    seen = set()\n    \n    for num in arr:\n        if arr.count(num) == 1 and num not in seen:\n            product *= num\n            seen.add(num)\n    \n    return product"}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    for tup in test_list:\n        if len(tup) != K:\n            return False\n    return True"}
{"task_id": 27, "completion": "def remove_digits_from_list(lst):\n    return [''.join([char for char in string if not char.isdigit()]) for string in lst]"}
{"task_id": 28, "completion": "def binomial_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            if j == 0 or j == i:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    \n    return dp[n][k]"}
{"task_id": 29, "completion": "def get_Odd_Occurrence(arr, arr_size):\n    result = 0\n    for i in range(arr_size):\n        result = result ^ arr[i]\n    return result"}
{"task_id": 30, "completion": "def check_equality(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count"}
{"task_id": 31, "completion": "def top_k_frequent(nums, k):\n    counter = Counter(nums)\n    heap = [(-freq, num) for num, freq in counter.items()]\n    heapq.heapify(heap)\n    \n    top_k = []\n    for _ in range(k):\n        top_k.append(heapq.heappop(heap)[1])\n    \n    return top_k"}
{"task_id": 32, "completion": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": 33, "completion": "def decimal_to_binary(N):\n    if N == 0:\n        return '0'\n    \n    binary = ''\n    while N > 0:\n        binary = str(N % 2) + binary\n        N = N // 2\n    \n    return binary"}
{"task_id": 34, "completion": "def find_missing(arr, N):\n    if len(arr) == 0:\n        return 1\n    \n    if arr[0] != 1:\n        return 1\n    \n    if arr[-1] != N:\n        return N\n    \n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] != 1:\n            return arr[i-1] + 1"}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1)"}
{"task_id": 36, "completion": "def find_Nth_Digit(p, q, N):\n    decimal_part = str(p / q)[2:]  # Get the decimal part of the division result\n    if N <= len(decimal_part):\n        return int(decimal_part[N - 1])\n    else:\n        return None"}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    sorted_integers = sorted(integers)\n    sorted_strings = sorted(strings)\n    \n    sorted_mixed_list = sorted_integers + sorted_strings\n    \n    return sorted_mixed_list"}
{"task_id": 38, "completion": "def div_even_odd(list1):\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n\n        if even_num is not None and odd_num is not None:\n            break\n\n    if even_num is None or odd_num is None:\n        return \"Both even and odd numbers not found in the list.\"\n\n    return even_num / odd_num"}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearrange_string(S):\n    # Count the frequency of each character in the string\n    char_count = Counter(S)\n    \n    # Sort characters by frequency in descending order\n    sorted_chars = sorted(char_count, key=lambda x: char_count[x], reverse=True)\n    \n    # Check if the most frequent character count is greater than half the length of the string + 1\n    if char_count[sorted_chars[0]] > (len(S) + 1) // 2:\n        return False\n    \n    # Create a list to store the rearranged string\n    rearranged = [None] * len(S)\n    \n    # Fill the even indices with the most frequent character\n    rearranged[::2] = [sorted_chars[0]] * char_count[sorted_chars[0]]\n    \n    # Fill the odd indices with the remaining characters\n    idx = 1\n    for char in sorted_chars[1:]:\n        for _ in range(char_count[char]):\n            rearranged[idx] = char\n            idx += 2\n    \n    return ''.join(rearranged)"}
{"task_id": 40, "completion": "def freq_element(nums):\n    flattened_list = [item for sublist in nums for item in sublist]\n    freq_counter = Counter(flattened_list)\n    \n    return freq_counter"}
{"task_id": 41, "completion": "def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"}
{"task_id": 42, "completion": "def find_Sum(arr, n):\n    sum_repeated = 0\n    seen = set()\n    \n    for i in range(n):\n        if arr[i] in seen:\n            sum_repeated += arr[i]\n        else:\n            seen.add(arr[i])\n    \n    return sum_repeated"}
{"task_id": 43, "completion": "def find_lowercase_with_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    match = re.match(pattern, text)\n    \n    if match:\n        return match.group()\n    else:\n        return None"}
{"task_id": 45, "completion": "def find_gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x"}
{"task_id": 46, "completion": "def test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False"}
{"task_id": 47, "completion": "def compute_Last_Digit(A, B):\n    def factorial(n):\n        if n == 0:\n            return 1\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\n    def last_digit(n):\n        return n % 10\n\n    factorial_A = factorial(A)\n    factorial_B = factorial(B)\n\n    if factorial_A == 0 or factorial_B == 0:\n        return \"Factorial of 0 is 1, so the last digit is 1\"\n\n    if factorial_A <= factorial_B:\n        if factorial_B % factorial_A == 0:\n            return last_digit(factorial_B // factorial_A)\n        else:\n            return \"Factorial of A does not divide Factorial of B\"\n    else:\n        return \"Factorial of A is greater than Factorial of B\"\n`"}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Mask to set all odd bits to 1\n    mask = 0xAAAAAAAA  # 0b10101010101010101010101010101010\n    \n    # Perform bitwise OR operation to set odd bits\n    result = n | mask\n    \n    return result"}
{"task_id": 49, "completion": "def specified_element(nums, N):\n    result = []\n    for sublist in nums:\n        if N < len(sublist):\n            result.append(sublist[N])\n        else:\n            result.append(None)\n    return result"}
{"task_id": 50, "completion": "def min_length_list(input_list):\n    min_length = min(input_list, key=lambda x: len(x))\n    return min_length"}
{"task_id": 51, "completion": "def check_equilateral(x, y, z):\n    if x == y and y == z:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")"}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    area = base * height\n    return area"}
{"task_id": 53, "completion": "def check_equality(str):\n    if len(str) < 1:\n        return False\n    return str[0] == str[-1]"}
{"task_id": 54, "completion": "def counting_sort(arr):\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n    output = [0] * len(arr)\n\n    for num in arr:\n        count[num] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for num in arr:\n        output[count[num] - 1] = num\n        count[num] -= 1\n\n    return output"}
{"task_id": 55, "completion": "def tn_gp(a, n, r):\n    return a * (r ** (n - 1))"}
{"task_id": 56, "completion": "def rev(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False"}
{"task_id": 57, "completion": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    result = ''.join(map(str, arr))\n    return int(result)"}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    return (x < 0 and y > 0) or (x > 0 and y < 0)"}
{"task_id": 59, "completion": "def is_octagonal(n):\n    return n * (3*n - 2)"}
{"task_id": 60, "completion": "def max_len_sub(arr, n):\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(0, i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"}
{"task_id": 61, "completion": "def count_Substrings(s, n):\n    def is_valid_substring(sub):\n        return sum(int(digit) for digit in sub) == len(sub)\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if is_valid_substring(s[i:j]):\n                count += 1\n    \n    return count"}
{"task_id": 62, "completion": "def smallest_num(xs):\n    if not xs:\n        return None\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": 63, "completion": "def max_difference(test_list):\n    if not test_list or len(test_list) < 2:\n        return None\n    \n    min_val = test_list[0][0]\n    max_diff = test_list[0][1] - test_list[0][0]\n    \n    for i in range(1, len(test_list)):\n        min_val = min(min_val, test_list[i][0])\n        max_diff = max(max_diff, test_list[i][1] - min_val)\n    \n    return max_diff"}
{"task_id": 64, "completion": "def sort_tuples_by_second_element(tuples_list):\n    sorted_list = sorted(tuples_list, key=lambda x: x[1])\n    return sorted_list"}
{"task_id": 65, "completion": "def recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"}
{"task_id": 66, "completion": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": 67, "completion": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]"}
{"task_id": 68, "completion": "def is_monotonic(A):\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            increasing = False\n        if A[i] > A[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing"}
{"task_id": 69, "completion": "def is_sublist(lst, sub):\n    if len(sub) == 0:\n        return True\n    if len(sub) > len(lst):\n        return False\n    for i in range(len(lst) - len(sub) + 1):\n        if lst[i:i+len(sub)] == sub:\n            return True\n    return False"}
{"task_id": 70, "completion": "def find_equal_tuple(Input, k):\n    lengths = set(len(t) for t in Input)\n    return len(lengths) == 1"}
{"task_id": 71, "completion": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"}
{"task_id": 72, "completion": "def dif_Square(n):\n    for i in range(1, n):\n        square1 = i*i\n        square2 = (i+1)*(i+1)\n        if square2 - square1 == n:\n            return True\n    return False"}
{"task_id": 73, "completion": "def multiple_split(text):\n    delimiters = [' ', ',', ';', ':', '-']\n    pattern = '|'.join(map(re.escape, delimiters))\n    result = re.split(pattern, text)\n    return result"}
{"task_id": 74, "completion": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern and color_to_pattern[color] != pattern:\n            return False\n        if pattern in pattern_to_color and pattern_to_color[pattern] != color:\n            return False\n        \n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    \n    return True"}
{"task_id": 75, "completion": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"}
{"task_id": 76, "completion": "def count_squares(m, n):\n    if m == 0 or n == 0:\n        return 0\n    if m == n:\n        return m\n    if m < n:\n        return count_squares(m, n - m) + count_squares(m, m)\n    return count_squares(m - n, n) + count_squares(n, n)"}
{"task_id": 77, "completion": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    \n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    return even_sum - odd_sum"}
{"task_id": 78, "completion": "def count_With_Odd_SetBits(n):\n    def countSetBits(num):\n        count = 0\n        while num:\n            count += num & 1\n            num >>= 1\n        return count\n\n    odd_count = 0\n    for i in range(n+1):\n        if countSetBits(i) % 2 != 0:\n            odd_count += 1\n\n    return odd_count"}
{"task_id": 79, "completion": "def word_len(s):\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": 80, "completion": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": 81, "completion": "def zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, test_tup2))"}
{"task_id": 82, "completion": "def volume_sphere(r):\n    volume = (4/3) * math.pi * r**3\n    return volume"}
{"task_id": 83, "completion": "def get_Char(strr):\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total)"}
{"task_id": 84, "completion": "def newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]"}
{"task_id": 85, "completion": "def surfacearea_sphere(r):\n    surface_area = 4 * math.pi * r**2\n    return surface_area"}
{"task_id": 86, "completion": "def centered_hexagonal_number(n):\n    if n == 1:\n        return 1\n    else:\n        return 3*n*(n-1) + 1"}
{"task_id": 87, "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": 88, "completion": "def freq_count(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"}
{"task_id": 89, "completion": "def closest_num(n):\n    closest_smaller = n - 1\n    return closest_smaller"}
{"task_id": 90, "completion": "def len_longest_word(list1):\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"}
{"task_id": 91, "completion": "def find_substring(str_list, sub_str):\n    result = []\n    for string in str_list:\n        if sub_str in string:\n            result.append(string)\n    return result"}
{"task_id": 92, "completion": "def is_undulating(n):\n    num_str = str(n)\n    \n    if len(num_str) < 3:\n        return False\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(num_str) - 1):\n        if not (num_str[i-1] < num_str[i] < num_str[i+1]):\n            increasing = False\n        if not (num_str[i-1] > num_str[i] > num_str[i+1]):\n            decreasing = False\n    \n    return increasing or decreasing"}
{"task_id": 93, "completion": "def power(a, b):\n    return a ** b"}
{"task_id": 94, "completion": "def index_minimum(test_list):\n    min_val = float('inf')\n    min_index = None\n    \n    for i, tpl in enumerate(test_list):\n        if tpl[1] < min_val:\n            min_val = tpl[1]\n            min_index = i\n    \n    return min_index"}
{"task_id": 95, "completion": "def find_min_length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"}
{"task_id": 96, "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": 97, "completion": "def frequency_lists(list1):\n    frequency_dict = {}\n    \n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    \n    return frequency_dict"}
{"task_id": 98, "completion": "def multiply_num(numbers):\n    if len(numbers) == 0:\n        return 0\n    \n    result = 1\n    for num in numbers:\n        result *= num\n    \n    return result / len(numbers)"}
{"task_id": 99, "completion": "def decimal_to_binary(n):\n    return bin(n)[2:]"}
{"task_id": 100, "completion": "def next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num"}
{"task_id": 101, "completion": "def kth_element(arr, n, k):\n    if k > 0 and k <= n:\n        arr.sort()\n        return arr[k-1]\n    else:\n        return \"Invalid value of k\""}
{"task_id": 102, "completion": "def snake_to_camel(word):\n    parts = word.split('_')\n    camel_case = parts[0] + ''.join(part.title() for part in parts[1:])\n    return camel_case"}
{"task_id": 103, "completion": "def eulerian_num(n, m):\n    if m == 0:\n        return 1 if n == 0 else 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    return (m+1) * eulerian_num(n-1, m) + (n-m) * eulerian_num(n-1, m-1)"}
{"task_id": 104, "completion": "def sort_sublists(input_list):\n    sorted_list = [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list if all(isinstance(item, str) for item in sublist)]\n    return sorted_list"}
{"task_id": 105, "completion": "def count(lst):\n    return lst.count(True)"}
{"task_id": 106, "completion": "def add_lists(test_list, test_tup):\n    result = []\n    for i in range(min(len(test_list), len(test_tup))):\n        result.append(test_list[i] + test_tup[i])\n    return tuple(result)"}
{"task_id": 107, "completion": "def count_Hexadecimal(L, R):\n    count = 0\n    for i in range(L, R+1):\n        if all(c in '0123456789ABCDEF' for c in hex(i)[2:]):\n            count += 1\n    return count"}
{"task_id": 108, "completion": "def merge_sorted_list(*args):\n    heap = []\n    for i, it in enumerate(map(iter, args)):\n        try:\n            heapq.heappush(heap, (next(it), i, it))\n        except StopIteration:\n            pass\n\n    while heap:\n        val, i, it = heapq.heappop(heap)\n        yield val\n        try:\n            heapq.heappush(heap, (next(it), i, it))\n        except StopIteration:\n            pass"}
{"task_id": 109, "completion": "def odd_equivalent(s, n):\n    s = s * 2  # Double the string to cover all possible rotations\n    count = 0\n    \n    for i in range(n):\n        rotated_str = s[i:i+n]\n        decimal_value = int(rotated_str, 2)\n        \n        if decimal_value % 2 != 0:\n            count += 1\n    \n    return count"}
{"task_id": 110, "completion": "def extract_missing(test_list, strt_val, stop_val):\n    missing_ranges = []\n    test_list = sorted(test_list)\n    \n    if strt_val < test_list[0]:\n        missing_ranges.append((strt_val, test_list[0]))\n    \n    for i in range(len(test_list) - 1):\n        if test_list[i+1] - test_list[i] > 1:\n            missing_ranges.append((test_list[i]+1, test_list[i+1]-1))\n    \n    if stop_val > test_list[-1]:\n        missing_ranges.append((test_list[-1], stop_val))\n    \n    return missing_ranges\n`"}
{"task_id": 111, "completion": "def common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    \n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    \n    return list(common_elements)"}
{"task_id": 112, "completion": "def perimeter(diameter, height):\n    radius = diameter / 2\n    base_circumference = 2 * math.pi * radius\n    lateral_surface_area = 2 * math.pi * radius * height\n    total_perimeter = base_circumference + lateral_surface_area\n    return total_perimeter"}
{"task_id": 113, "completion": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"}
{"task_id": 114, "completion": "def assign_freq(test_list):\n    freq_dict = dict(Counter(test_list))\n    return freq_dict"}
{"task_id": 115, "completion": "def empty_dict(list1):\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"}
{"task_id": 116, "completion": "def tuple_to_int(nums):\n    result = int(''.join(map(str, nums)))\n    return result"}
{"task_id": 117, "completion": "def list_to_float(test_list):\n    converted_list = []\n    for item in test_list:\n        try:\n            converted_list.append(float(item))\n        except ValueError:\n            converted_list.append(item)\n    return converted_list"}
{"task_id": 118, "completion": "def string_to_list(input_string):\n    word_list = input_string.split()\n    return word_list"}
{"task_id": 119, "completion": "def search(arr, n):\n    if n == 1:\n        return arr[0]\n    \n    left, right = 0, n - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if mid == 0 and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        elif mid == n - 1 and arr[mid] != arr[mid - 1]:\n            return arr[mid]\n        elif arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        elif arr[mid] == arr[mid - 1]:\n            if (mid - left) % 2 == 0:\n                left = mid + 1\n            else:\n                right = mid - 2\n        else:\n            if (right - mid) % 2 == 0:\n                right = mid - 1\n            else:\n                left = mid + 2\n    \n    return None"}
{"task_id": 120, "completion": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            max_product = max(max_product, product)\n    \n    return max_product"}
{"task_id": 121, "completion": "def check_triplet(A, n, target_sum):\n    A.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == target_sum:\n                return [A[i], A[left], A[right]]\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None"}
{"task_id": 122, "completion": "def smartNumber(n):\n    count = 0\n    num = 1\n    while count < n:\n        if is_smart_number(num):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": 123, "completion": "def amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        sum_div_i = sum_divisors(i)\n        if sum_div_i != i and sum_divisors(sum_div_i) == i and sum_div_i <= limit:\n            amicable_sum += i\n    return amicable_sum"}
{"task_id": 124, "completion": "import cmath\n\ndef angle_complex(a, b):\n    z = complex(a, b)\n    angle = cmath.phase(z)\n    return angle"}
{"task_id": 125, "completion": "def find_length(string, n):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = count_0 - count_1\n        if diff > max_diff:\n            max_diff = diff\n        if diff < 0:\n            count_0 = 0\n            count_1 = 0\n    return max_diff"}
{"task_id": 126, "completion": "def sum_common_divisors(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)"}
{"task_id": 127, "completion": "def multiply_int(x, y):\n    result = 0\n    for i in range(abs(y)):\n        result += x\n    if y < 0:\n        result = -result\n    return result"}
{"task_id": 128, "completion": "def long_words(n, word_list):\n    return [word for word in word_list if len(word) > n]"}
{"task_id": 129, "completion": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    \n    # Calculate the sum of the first row\n    sum_first_row = sum(my_matrix[0])\n    \n    # Check if all rows have the same sum\n    for row in my_matrix:\n        if sum(row) != sum_first_row:\n            return False\n    \n    # Check if all columns have the same sum\n    for j in range(n):\n        sum_col = sum(my_matrix[i][j] for i in range(n))\n        if sum_col != sum_first_row:\n            return False\n    \n    # Check if the sum of the main diagonal is the same\n    sum_main_diag = sum(my_matrix[i][i] for i in range(n))\n    if sum_main_diag != sum_first_row:\n        return False\n    \n    # Check if the sum of the secondary diagonal is the same\n    sum_sec_diag = sum(my_matrix[i][n-1-i] for i in range(n))\n    if sum_sec_diag != sum_first_row:\n        return False\n    \n    return True\n`"}
{"task_id": 130, "completion": "def max_occurrences(nums):\n    counts = Counter(nums)\n    max_count = max(counts.values())\n    max_items = [item for item, count in counts.items() if count == max_count]\n    return max_items"}
{"task_id": 131, "completion": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    \n    while i < j:\n        if str_list[i] in vowels and str_list[j] in vowels:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n        elif str_list[i] in vowels:\n            j -= 1\n        elif str_list[j] in vowels:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    \n    return \"\".join(str_list)"}
{"task_id": 132, "completion": "def tup_string(tup):\n    return str(tup)"}
{"task_id": 133, "completion": "sum_negativenum = lambda nums: sum(num for num in nums if num < 0)"}
{"task_id": 134, "completion": "def check_last(arr, n, p):\n    for _ in range(p):\n        arr[-1] += 1  # Perform the operation on the last element of the array\n    \n    if arr[-1] % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""}
{"task_id": 135, "completion": "def hexagonal_num(n):\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    return n * (2 * n - 1)"}
{"task_id": 136, "completion": "def cal_electbill(units):\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 150:\n        bill = 50 * 0.50 + (units - 50) * 0.75\n    elif units <= 250:\n        bill = 50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20\n    else:\n        bill = 50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50\n    \n    return bill"}
{"task_id": 137, "completion": "def zero_count(nums):\n    if not nums:\n        return 0\n    \n    zero_count = sum(1 for num in nums if num == 0)\n    ratio = zero_count / len(nums)\n    \n    return ratio"}
{"task_id": 138, "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    \n    while n > 0:\n        if n & 1:\n            n >>= 1\n            if n:\n                return False\n        else:\n            n >>= 1\n    \n    return True"}
{"task_id": 139, "completion": "def circle_circumference(r):\n    circumference = 2 * math.pi * r\n    return circumference"}
{"task_id": 140, "completion": "def extract_singly(test_list):\n    count_dict = {}\n    \n    for tup in test_list:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n    \n    result = [key for key, value in count_dict.items() if value == 1]\n    \n    return result"}
{"task_id": 141, "completion": "def pancake_sort(nums):\n    def flip(arr, k):\n        i = 0\n        while i < k // 2:\n            arr[i], arr[k - i - 1] = arr[k - i - 1], arr[i]\n            i += 1\n\n    def find_max_index(arr, k):\n        max_index = 0\n        for i in range(1, k):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(nums, i)\n        if max_index != i - 1:\n            flip(nums, max_index + 1)\n            flip(nums, i)\n\n    return nums"}
{"task_id": 142, "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] in list2 and list1[i] in list3:\n            count += 1\n    return count"}
{"task_id": 143, "completion": "def find_lists(input_tuple):\n    count = 0\n    for item in input_tuple:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": 144, "completion": "def sum_Pairs(arr, n):\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += abs(arr[i] - arr[j])\n    return result"}
{"task_id": 145, "completion": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return None\n    \n    max_diff = abs(arr[0] - arr[1])\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"}
{"task_id": 146, "completion": "def ascii_value_string(str1):\n    total_ascii_value = 0\n    for char in str1:\n        total_ascii_value += ord(char)\n    return total_ascii_value"}
{"task_id": 147, "completion": "def max_path_sum(tri, m, n):\n    # Start from the second last row and move upwards\n    for i in range(m-2, -1, -1):\n        for j in range(i+1):\n            # For each element, find the maximum of the two children and add it to the current element\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    \n    # The maximum total path sum will be at the top of the triangle\n    return tri[0][0]"}
{"task_id": 148, "completion": "def sum_digits_single(x):\n    # Convert the number to a string to easily access individual digits\n    num_str = str(x)\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(num_str, reverse=True)\n    \n    # Divide the number into two parts by taking alternate digits\n    part1 = int(''.join(sorted_digits[::2]))\n    part2 = int(''.join(sorted_digits[1::2]))\n    \n    return part1, part2"}
{"task_id": 149, "completion": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"}
{"task_id": 150, "completion": "def does_Contain_B(a, b, c):\n    if a == b:\n        return True\n    elif a < b:\n        if c > 0:\n            return does_Contain_B(a+c, b, c)\n        else:\n            return False\n    else:\n        if c < 0:\n            return does_Contain_B(a+c, b, c)\n        else:\n            return False"}
{"task_id": 151, "completion": "def are_coprime(p, q):\n    return gcd(p, q) == 1"}
{"task_id": 152, "completion": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result"}
{"task_id": 153, "completion": "def parabola_vertex(a, b, c):\n    # Calculate the x-coordinate of the vertex\n    vertex_x = -b / (2 * a)\n    \n    # Calculate the y-coordinate of the vertex\n    vertex_y = a * vertex_x**2 + b * vertex_x + c\n    \n    return (vertex_x, vertex_y)"}
{"task_id": 154, "completion": "def specified_element(nums, N):\n    result = []\n    for sublist in nums:\n        if len(sublist) > N:\n            result.append(sublist[N])\n    return result"}
{"task_id": 155, "completion": "def even_bit_toggle_number(n):\n    result = 0\n    bit_position = 0\n    \n    while n > 0:\n        if bit_position % 2 == 1:\n            result = result | (n & 1) << bit_position\n        n = n >> 1\n        bit_position += 1\n    \n    return result"}
{"task_id": 156, "completion": "def tuple_int_str(tuple_str):\n    tuple_int = tuple(int(value) for value in tuple_str)\n    return tuple_int"}
{"task_id": 157, "completion": "def encode_list(lst):\n    encoded_list = []\n    current_count = 1\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_count += 1\n        else:\n            encoded_list.append((lst[i - 1], current_count))\n            current_count = 1\n\n    encoded_list.append((lst[-1], current_count))\n\n    return encoded_list"}
{"task_id": 158, "completion": "def min_Ops(arr, n, k):\n    # Calculate the sum of the array\n    total_sum = sum(arr)\n    \n    # Calculate the target value to make all elements equal\n    target_value = total_sum + k\n    \n    # Calculate the number of operations required\n    operations = max(0, (n * k) - total_sum)\n    \n    return operations"}
{"task_id": 159, "completion": "def month_season(month, day):\n    seasons = {\n        'spring': [(3, 20), (6, 20)],\n        'summer': [(6, 21), (9, 22)],\n        'autumn': [(9, 23), (12, 20)],\n        'winter': [(12, 21), (3, 19)]\n    }\n\n    for season, (start_date, end_date) in seasons.items():\n        if (month == start_date[0] and day >= start_date[1]) or (month == end_date[0] and day <= end_date[1]):\n            print(f\"The season for {month}/{day} is {season}\")\n            break"}
{"task_id": 160, "completion": "def find_solution(a, b, n):\n    g, x, y = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    x *= n // g\n    y *= n // g\n    return x, y"}
{"task_id": 161, "completion": "def remove_elements(list1, list2):\n    list1[:] = [element for element in list1 if element not in list2]"}
{"task_id": 162, "completion": "def sum_series(n):\n    total_sum = 0\n    x = 0\n    while n - x > 0:\n        total_sum += n - x\n        x += 2\n    return total_sum"}
{"task_id": 163, "completion": "import math\n\ndef area_polygon(n, s):\n    area = (n * s**2) / (4 * math.tan(math.pi/n))\n    return area"}
{"task_id": 164, "completion": "def check_sum_of_divisors(n):\n    sum_divisors = divSum(n)\n    if sum_divisors == n:\n        return True\n    else:\n        return False"}
{"task_id": 165, "completion": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        char = str1[i].lower()\n        if char.isalpha() and ord(char) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": 166, "completion": "def find_even_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": 167, "completion": "def next_power_of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": 168, "completion": "def frequency(arr, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count"}
{"task_id": 169, "completion": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n+1):\n            pell.append(2*pell[i-1] + pell[i-2])\n        return pell[n]"}
{"task_id": 170, "completion": "def sum_range_list(list1, m, n):\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid range\"\n    \n    return sum(list1[m:n+1])"}
{"task_id": 171, "completion": "def perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter"}
{"task_id": 172, "completion": "def count_occurrence(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count"}
{"task_id": 173, "completion": "def remove_splchar(text):\n    return re.sub(r'[^a-zA-Z0-9]', '', text)"}
{"task_id": 174, "completion": "def group_keyvalue(seq):\n    result = {}\n    for key, value in seq:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result"}
{"task_id": 175, "completion": "def is_valid_parentheses(str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n\n    return not stack"}
{"task_id": 176, "completion": "def perimeter_triangle(a, b, c):\n    perimeter = a + b + c\n    return perimeter"}
{"task_id": 177, "completion": "def find_numbers_with_lcm_in_range(L, R):\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if L <= lcm(i, j) <= R:\n                return i, j\n    return None"}
{"task_id": 178, "completion": "def string_literals(patterns, text):\n    results = {}\n    for pattern in patterns:\n        matches = re.findall(re.escape(pattern), text)\n        results[pattern] = matches\n    return results"}
{"task_id": 179, "completion": "def is_keith_number(num):\n    num_str = str(num)\n    digits = [int(digit) for digit in num_str]\n    n = len(num_str)\n    sequence = digits.copy()\n    \n    while sequence[-1] < num:\n        next_num = sum(sequence[-n:])\n        sequence.append(next_num)\n    \n    if num in sequence:\n        return True\n    else:\n        return False"}
{"task_id": 180, "completion": "def distance_lat_long(slat, slon, elat, elon):\n    # Radius of the Earth in km\n    R = 6371.0\n\n    # Convert latitude and longitude from degrees to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n\n    # Calculate the change in coordinates\n    dlat = elat - slat\n    dlon = elon - slon\n\n    # Haversine formula to calculate distance\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    return distance"}
{"task_id": 181, "completion": "def longest_common_prefix(strings):\n    if not strings:\n        return \"\"\n    \n    prefix = strings[0]\n    for i in range(1, len(strings)):\n        prefix = common_prefix_util(prefix, strings[i])\n        if not prefix:\n            break\n    \n    return prefix"}
{"task_id": 182, "completion": "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_chars = re.findall(r'[^A-Za-z0-9\\s]', string)\n    numeric = re.findall(r'\\d', string)\n\n    return {\n        \"uppercase\": uppercase,\n        \"lowercase\": lowercase,\n        \"special_chars\": special_chars,\n        \"numeric\": numeric\n    }"}
{"task_id": 183, "completion": "def count_pairs(arr, n, k):\n    count = 0\n    pair_set = set()\n    \n    for i in range(n):\n        if arr[i] + k in pair_set:\n            count += 1\n        if arr[i] - k in pair_set:\n            count += 1\n        pair_set.add(arr[i])\n    \n    return count"}
{"task_id": 184, "completion": "def greater_specificnum(lst, num):\n    result = [x for x in lst if x > num]\n    return result"}
{"task_id": 185, "completion": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b**2) / (4 * a)\n    \n    focus = (h, k + 1 / (4 * a))\n    \n    return focus"}
{"task_id": 186, "completion": "import re\n\ndef check_literals(text, patterns):\n    found_literals = []\n    for pattern in patterns:\n        matches = re.findall(re.escape(pattern), text)\n        found_literals.extend(matches)\n    \n    return found_literals"}
{"task_id": 187, "completion": "def longest_common_subsequence(X, Y, m, n):\n    # Create a 2D array to store the lengths of longest common subsequences\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Fill the dp array using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Reconstruct the longest common subsequence\n    lcs = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]"}
{"task_id": 188, "completion": "def prod_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if math.sqrt(i).is_integer() and math.sqrt(n // i).is_integer():\n                return True\n    return False"}
{"task_id": 189, "completion": "def first_missing_positive(arr, n):\n    # Move all non-positive integers to the end of the array\n    j = 0\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n\n    # Consider only positive integers\n    arr = arr[j:]\n    n = len(arr)\n\n    # Mark the presence of each positive integer by changing the sign of the corresponding index\n    for i in range(n):\n        if abs(arr[i]) - 1 < n and arr[abs(arr[i]) - 1] > 0:\n            arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1]\n\n    # Find the first missing positive integer\n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n\n    return n + 1"}
{"task_id": 190, "completion": "def count_integral_points(x1, y1, x2, y2):\n    min_x = min(x1, x2)\n    max_x = max(x1, x2)\n    min_y = min(y1, y2)\n    max_y = max(y1, y2)\n    \n    count = 0\n    for x in range(min_x + 1, max_x):\n        for y in range(min_y + 1, max_y):\n            if x.is_integer() and y.is_integer():\n                count += 1\n    \n    return count"}
{"task_id": 191, "completion": "def check_monthnumber(monthname):\n    thirty_days_months = ['April', 'June', 'September', 'November']\n    \n    if monthname in thirty_days_months:\n        return f\"{monthname} has 30 days.\"\n    else:\n        return f\"{monthname} does not have 30 days.\""}
{"task_id": 192, "completion": "def check_string(s):\n    has_letter = False\n    has_number = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        if char.isdigit():\n            has_number = True\n    \n    return has_letter and has_number"}
{"task_id": 193, "completion": "def remove_duplicates(test_tup):\n    return tuple(sorted(set(test_tup), key=test_tup.index))"}
{"task_id": 194, "completion": "def octal_to_decimal(n):\n    decimal = 0\n    power = 0\n    \n    while n > 0:\n        digit = n % 10\n        decimal += digit * (8 ** power)\n        n //= 10\n        power += 1\n    \n    return decimal"}
{"task_id": 195, "completion": "def first(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"task_id": 196, "completion": "def remove_tuples(test_list, K):\n    return [tup for tup in test_list if len(tup) != K]"}
{"task_id": 197, "completion": "def find_exponentio(test_tup1, test_tup2):\n    result_tup = tuple(x ** y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"}
{"task_id": 198, "completion": "import math\n\ndef largest_triangle(a, b):\n    # Calculate the vertices of the triangle\n    x1 = a\n    y1 = 0\n    x2 = 0\n    y2 = b\n\n    # Calculate the distance between the two points\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\n    # Calculate the midpoint of the two points\n    mid_x = (x1 + x2) / 2\n    mid_y = (y1 + y2) / 2\n\n    # Calculate the third vertex of the triangle\n    x3 = mid_x + (distance / 2) * math.sqrt(3)\n    y3 = mid_y + (distance / 2)\n\n    return [(x1, y1), (x2, y2), (x3, y3)]\n`"}
{"task_id": 199, "completion": "def highest_power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)"}
{"task_id": 200, "completion": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i, val in enumerate(lst) if val == max_val]"}
{"task_id": 201, "completion": "def chkList(lst):\n    return all(element == lst[0] for element in lst)"}
{"task_id": 202, "completion": "def remove_even(input_str):\n    result = \"\"\n    for index, char in enumerate(input_str):\n        if index % 2 != 0:\n            result += char\n    return result"}
{"task_id": 203, "completion": "def hamming_distance(n1, n2):\n    # XOR the two numbers to get the bits that are different\n    xor_result = n1 ^ n2\n    \n    # Count the number of set bits in the XOR result\n    hamming_dist = 0\n    while xor_result:\n        hamming_dist += xor_result & 1\n        xor_result >>= 1\n    \n    return hamming_dist"}
{"task_id": 204, "completion": "def count(s, c):\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count"}
{"task_id": 205, "completion": "def inversion_elements(test_tup):\n    inversions = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversions += 1\n    return inversions"}
{"task_id": 206, "completion": "def concatenate_elements(test_tup):\n    concatenated_list = [str(test_tup[i]) + str(test_tup[i+1]) for i in range(len(test_tup)-1)]\n    return tuple(concatenated_list)"}
{"task_id": 207, "completion": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]"}
{"task_id": 208, "completion": "def is_decimal(num):\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    if re.match(pattern, num):\n        return True\n    else:\n        return False"}
{"task_id": 209, "completion": "def heap_replace(heap, new_item):\n    heapq.heapreplace(heap, new_item)"}
{"task_id": 210, "completion": "import re\n\ndef is_allowed_specific_char(string):\n    pattern = re.compile(r'^[a-zA-Z0-9]+$')\n    if pattern.match(string):\n        return True\n    else:\n        return False"}
{"task_id": 211, "completion": "def count_Num(n):\n    count = 0\n    for i in range(2**n):\n        if (i & 1) and (i & (1 << n)):\n            count += 1\n    return count"}
{"task_id": 212, "completion": "def fourth_Power_Sum(n):\n    return sum([i**4 for i in range(1, n+1)])"}
{"task_id": 213, "completion": "def concatenate_strings(test_tup1, test_tup2):\n    concatenated_tuple = tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n    return concatenated_tuple"}
{"task_id": 214, "completion": "def degree_radian(radian):\n    degree = radian * (180 / math.pi)\n    return degree"}
{"task_id": 215, "completion": "def decode_list(alist):\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend([alist[i+1]] * alist[i])\n    return decoded_list"}
{"task_id": 216, "completion": "def check_subset_list(list1, list2):\n    if not all(isinstance(item, list) for item in list1) or not all(isinstance(item, list) for item in list2):\n        return False\n    \n    for sublist in list1:\n        if sublist not in list2:\n            return False\n    \n    return True"}
{"task_id": 217, "completion": "def first_Repeated_Char(str):\n    char_set = set()\n    \n    for char in str:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    \n    return None"}
{"task_id": 218, "completion": "def min_operations(a, b):\n    count = 0\n    while a != b:\n        if a % 2 == 0 and a > b:\n            a //= 2\n        else:\n            a += 1\n        count += 1\n    return count"}
{"task_id": 219, "completion": "def extract_min_max(test_tup, K):\n    sorted_tup = sorted(test_tup)\n    min_elements = sorted_tup[:K]\n    max_elements = sorted_tup[-K:]\n    \n    return min_elements, max_elements"}
{"task_id": 220, "completion": "def replace_max_specialchar(text, n):\n    special_chars = [' ', ',', '.']\n    replaced_count = 0\n    result = ''\n    \n    for char in text:\n        if char in special_chars and replaced_count < n:\n            result += ':'\n            replaced_count += 1\n        else:\n            result += char\n    \n    return result"}
{"task_id": 221, "completion": "def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"}
{"task_id": 222, "completion": "def check_type(test_tuple):\n    if len(test_tuple) == 0:\n        return True\n    \n    data_type = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    \n    return True"}
{"task_id": 223, "completion": "def is_majority(arr, n, x):\n    # Find the first occurrence of x in the array\n    first_occurrence = arr.index(x)\n    \n    # Check if x is the majority element\n    if first_occurrence + n//2 < n and arr[first_occurrence + n//2] == x:\n        return True\n    else:\n        return False"}
{"task_id": 224, "completion": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": 225, "completion": "def find_Min(arr, low, high):\n    # If the array is not rotated\n    if arr[low] < arr[high]:\n        return arr[low]\n\n    # Binary search to find the minimum element\n    while low < high:\n        mid = low + (high - low) // 2\n\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return arr[low]"}
{"task_id": 226, "completion": "def odd_values_string(input_str):\n    result = \"\"\n    for index, char in enumerate(input_str):\n        if index % 2 == 0:\n            result += char\n    return result"}
{"task_id": 227, "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": 228, "completion": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with all bits set in the given range\n    mask = (1 << (r - l + 1)) - 1 << l\n    \n    # Check if all bits are unset in the given range\n    if n & mask == 0:\n        return True\n    else:\n        return False"}
{"task_id": 229, "completion": "def re_arrange_array(arr, n):\n    # Initialize two pointers\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        if arr[left] < 0:\n            left += 1\n        else:\n            if arr[right] < 0:\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n            right -= 1\n    \n    return arr"}
{"task_id": 230, "completion": "def replace_blank(str1, char):\n    return str1.replace(' ', char)"}
{"task_id": 231, "completion": "def max_sum(tri, n):\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            if tri[i + 1][j] > tri[i + 1][j + 1]:\n                tri[i][j] += tri[i + 1][j]\n            else:\n                tri[i][j] += tri[i + 1][j + 1]\n    \n    return tri[0][0]"}
{"task_id": 232, "completion": "def larg_nnum(list1, n):\n    if n > len(list1):\n        return \"n is greater than the length of the list\"\n    \n    list1.sort(reverse=True)\n    return list1[:n]"}
{"task_id": 233, "completion": "def lateral_surface_cylinder(r, h):\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area"}
{"task_id": 234, "completion": "def volume_cube(l):\n    volume = l ** 3\n    return volume"}
{"task_id": 235, "completion": "def even_bit_set_number(n):\n    mask = 0xAAAAAAAA  # Mask with all even bits set to 1 (1010 in binary)\n    result = n | mask  # Set all even bits of the number\n    return result"}
{"task_id": 236, "completion": "def No_of_Triangle(N, K):\n    if N < K:\n        return 0\n    else:\n        return (N // K) ** 2"}
{"task_id": 237, "completion": "def check_occurrences(test_list):\n    occurrences = {}\n    \n    for record in test_list:\n        if record in occurrences:\n            occurrences[record] += 1\n        else:\n            occurrences[record] = 1\n    \n    similar_occurrences = {key: value for key, value in occurrences.items() if value > 1}\n    \n    return similar_occurrences"}
{"task_id": 238, "completion": "def number_of_substrings(s):\n    n = len(s)\n    return int(n * (n + 1) / 2)"}
{"task_id": 239, "completion": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    \n    for i in range(1, m+1):\n        dp[1][i] = 1\n    \n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            for k in range(j//2, j+1):\n                dp[i][j] += dp[i-1][k]\n    \n    total_sequences = sum(dp[n])\n    \n    return total_sequences"}
{"task_id": 240, "completion": "def replace_list(list1, list2):\n    if not list1:\n        return list2\n    list1[-1:] = list2\n    return list1"}
{"task_id": 241, "completion": "def array_3d(m, n, o):\n    return [[['*' for _ in range(o)] for _ in range(n)] for _ in range(m)]"}
{"task_id": 242, "completion": "def count_charac(str1):\n    return len(str1)"}
{"task_id": 243, "completion": "def sort_on_occurrence(lst):\n    counts = {}\n    for item in lst:\n        key = item[0]\n        if key in counts:\n            counts[key] += 1\n        else:\n            counts[key] = 1\n\n    sorted_lst = sorted(lst, key=lambda x: counts[x[0]], reverse=True)\n    return sorted_lst"}
{"task_id": 244, "completion": "def next_Perfect_Square(N):\n    # Find the square root of the given number\n    sqrt_N = math.isqrt(N)\n    \n    # Increment the square root by 1 to get the next integer\n    next_square = (sqrt_N + 1) ** 2\n    \n    return next_square"}
{"task_id": 245, "completion": "def max_sum(arr, n):\n    # Initialize two arrays to store the maximum increasing and decreasing subsequence sum ending at each index\n    inc = [0] * n\n    dec = [0] * n\n\n    # Calculate the maximum increasing subsequence sum ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Calculate the maximum decreasing subsequence sum ending at each index\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Find the maximum bi-tonic subsequence sum by adding the maximum increasing and decreasing subsequence sum at each index\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum"}
{"task_id": 246, "completion": "def babylonian_squareroot(number):\n    if number < 0:\n        return \"Square root is not defined for negative numbers\"\n    \n    guess = number / 2\n    tolerance = 0.0001\n    \n    while abs(guess * guess - number) > tolerance:\n        guess = (guess + number / guess) / 2\n    \n    return guess"}
{"task_id": 247, "completion": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"}
{"task_id": 248, "completion": "def harmonic_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return harmonic_sum(n-1) + 1/n"}
{"task_id": 249, "completion": "intersection_array = lambda array_nums1, array_nums2: list(filter(lambda x: x in array_nums1, array_nums2))"}
{"task_id": 250, "completion": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"}
{"task_id": 251, "completion": "def insert_element(lst, element):\n    new_lst = []\n    for item in lst:\n        new_lst.append(element)\n        new_lst.append(item)\n    return new_lst"}
{"task_id": 252, "completion": "def convert_to_polar(complex_num):\n    r = abs(complex_num)\n    theta = cmath.phase(complex_num)\n    return r, theta"}
{"task_id": 253, "completion": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"}
{"task_id": 254, "completion": "def words_ae(text):\n    words = re.findall(r'\\b[aAeE]\\w+', text)\n    return words"}
{"task_id": 255, "completion": "from itertools import product\n\ndef combinations_colors(colors, n):\n    color_list = [colors] * n\n    combinations = list(product(*color_list))\n    return combinations"}
{"task_id": 256, "completion": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": 257, "completion": "def swap_numbers(a, b):\n    a, b = b, a\n    return a, b"}
{"task_id": 258, "completion": "count_odd = lambda array_nums: len(list(filter(lambda x: x % 2 != 0, array_nums)))"}
{"task_id": 259, "completion": "def maximize_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples must have the same length\"\n    \n    max_tup = tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n    return max_tup"}
{"task_id": 260, "completion": "def newman_prime(n):\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_prime(num) and is_prime(2**num + 1):\n            count += 1\n    return num"}
{"task_id": 261, "completion": "def division_elements(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"}
{"task_id": 262, "completion": "def split_two_parts(list1, L):\n    if L < 0 or L > len(list1):\n        return \"Invalid length for the first part\"\n    \n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return part1, part2"}
{"task_id": 263, "completion": "def merge_dict(d1, d2):\n    merged_dict = d1.copy()\n    merged_dict.update(d2)\n    return merged_dict"}
{"task_id": 264, "completion": "def dog_age(h_age):\n    if h_age <= 0:\n        return \"Invalid age. Please provide a positive number.\"\n    elif h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 24\n    else:\n        dog_years = 24 + (h_age - 2) * 4\n        return dog_years"}
{"task_id": 265, "completion": "def list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]"}
{"task_id": 266, "completion": "def lateral_surface_cube(l):\n    lateral_surface_area = 4 * (l ** 2)\n    return lateral_surface_area"}
{"task_id": 267, "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"}
{"task_id": 268, "completion": "def find_star_num(n):\n    star_num = 6 * n * (n - 1) + 1\n    return star_num"}
{"task_id": 269, "completion": "def ascii_value(char):\n    return ord(char)"}
{"task_id": 270, "completion": "def sum_even_and_even_index(arr, n):\n    sum_even = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"}
{"task_id": 271, "completion": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum"}
{"task_id": 272, "completion": "def rear_extract(test_list):\n    result = []\n    for tup in test_list:\n        if len(tup) > 0:\n            result.append(tup[-1])\n    return result"}
{"task_id": 273, "completion": "def subtract_elements(tup1, tup2):\n    result = tuple(x - y for x, y in zip(tup1, tup2))\n    return result"}
{"task_id": 274, "completion": "import math\n\ndef even_binomial_coeff_sum(n):\n    total_sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            coeff = math.comb(n, i)\n            total_sum += coeff\n    return total_sum"}
{"task_id": 275, "completion": "def get_Position(a, n, m):\n    position = (m % n) - 1\n    if position < 0:\n        position = n - 1\n    return position"}
{"task_id": 276, "completion": "def volume_cylinder(r, h):\n    volume = math.pi * r**2 * h\n    return volume"}
{"task_id": 277, "completion": "def dict_filter(dictionary, n):\n    filtered_dict = {key: value for key, value in dictionary.items() if value == n}\n    return filtered_dict"}
{"task_id": 278, "completion": "def count_first_elements(test_tup, record):\n    count = 0\n    for item in test_tup:\n        if item == record:\n            break\n        if item == test_tup[0]:\n            count += 1\n    return count"}
{"task_id": 279, "completion": "def is_num_decagonal(n):\n    if n <= 0:\n        return \"Please enter a positive integer for n.\"\n    \n    decagonal_number = n * (7 * n - 5)\n    \n    return decagonal_number"}
{"task_id": 280, "completion": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n\n    return found"}
{"task_id": 281, "completion": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))"}
{"task_id": 282, "completion": "def sub_list(nums1, nums2):\n    result = list(map(lambda x, y: x - y, nums1, nums2))\n    return result"}
{"task_id": 283, "completion": "def validate(n):\n    num_str = str(n)\n    digit_freq = {str(i): 0 for i in range(10)}\n    \n    for digit in num_str:\n        digit_freq[digit] += 1\n    \n    for digit, freq in digit_freq.items():\n        if digit != '0' and freq > int(digit):\n            return False\n    \n    return True"}
{"task_id": 284, "completion": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": 285, "completion": "def text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 286, "completion": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    total_sum = sum(a)\n    \n    if total_sum <= 0:\n        return total_sum * k\n    \n    for i in range(n):\n        current_sum = 0\n        for j in range(i, i + n * k):\n            current_sum += a[j % n]\n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum"}
{"task_id": 287, "completion": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum"}
{"task_id": 288, "completion": "def modular_inverse(arr, N, P):\n    def gcd_extended(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n\n    def mod_inverse(a, m):\n        gcd, x, y = gcd_extended(a, m)\n        if gcd != 1:\n            return None\n        return (x % m + m) % m\n\n    count = 0\n    for num in arr:\n        inverse = mod_inverse(num, P)\n        if inverse is not None and inverse == num:\n            count += 1\n\n    return count\n`"}
{"task_id": 289, "completion": "def odd_days(year):\n    odd_days = 0\n    \n    # Number of odd days in a non-leap year\n    odd_days_non_leap = [1, 3, 5, 7, 9, 11]\n    \n    # Number of odd days in a leap year\n    odd_days_leap = [2, 4, 6, 8, 10, 12]\n    \n    # Check if the year is a leap year\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        for month in odd_days_leap:\n            odd_days += 1\n    else:\n        for month in odd_days_non_leap:\n            odd_days += 1\n    \n    return odd_days"}
{"task_id": 290, "completion": "def max_length(list_of_lists):\n    max_len = max(len(lst) for lst in list_of_lists)\n    max_lists = [lst for lst in list_of_lists if len(lst) == max_len]\n    return max_lists"}
{"task_id": 291, "completion": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n\n    same_color = [0] * n\n    diff_color = [0] * n\n\n    same_color[1] = k\n    diff_color[1] = k * (k - 1)\n\n    for i in range(2, n):\n        same_color[i] = diff_color[i - 1]\n        diff_color[i] = (same_color[i - 1] + diff_color[i - 1]) * (k - 1)\n\n    return same_color[n - 1] + diff_color[n - 1]\n`"}
{"task_id": 292, "completion": "def find_quotient(n, m):\n    if m == 0:\n        return \"Error: Division by zero\"\n    \n    quotient = n / m\n    return quotient"}
{"task_id": 293, "completion": "import math\n\ndef find_third_side_of_right_triangle(w, h):\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"}
{"task_id": 294, "completion": "def max_val(listval):\n    max_value = None\n    for val in listval:\n        if max_value is None or val > max_value:\n            max_value = val\n    return max_value"}
{"task_id": 295, "completion": "def sum_div(number):\n    divisors_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum"}
{"task_id": 296, "completion": "def merge(arr, temp, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp[k] = arr[j]\n            k += 1\n            j += 1\n            inv_count += (mid - i + 1)\n\n    while i <= mid:\n        temp[k] = arr[i]\n        k += 1\n        i += 1\n\n    while j <= right:\n        temp[k] = arr[j]\n        k += 1\n        j += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp[i]\n\n    return inv_count\n\ndef merge_sort(arr, temp, left, right):\n    inv_count = 0\n\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, temp, left, mid)\n        inv_count += merge_sort(arr, temp, mid + 1, right)\n        inv_count += merge(arr, temp, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr, n):\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)"}
{"task_id": 297, "completion": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"}
{"task_id": 298, "completion": "def intersection_nested_lists(l1, l2):\n    result = []\n    for sublist in l1:\n        for element in sublist:\n            if element in l2:\n                result.append(element)\n    return result"}
{"task_id": 299, "completion": "def max_aggregate(stdata):\n    max_aggregate = 0\n    for data in stdata:\n        aggregate = sum(data)\n        if aggregate > max_aggregate:\n            max_aggregate = aggregate\n    return max_aggregate"}
{"task_id": 300, "completion": "def count_binary_seq(n):\n    def count_sequences_helper(zeros, ones, n, sum_diff, memo):\n        if n == 0:\n            if sum_diff == 0:\n                return 1\n            else:\n                return 0\n\n        if (zeros, ones, sum_diff) in memo:\n            return memo[(zeros, ones, sum_diff)]\n\n        count = 0\n        count += count_sequences_helper(zeros + 1, ones, n - 1, sum_diff + 1, memo)\n        count += count_sequences_helper(zeros, ones + 1, n - 1, sum_diff - 1, memo)\n\n        memo[(zeros, ones, sum_diff)] = count\n        return count\n\n    memo = {}\n    return count_sequences_helper(0, 0, n, 0, memo)"}
{"task_id": 301, "completion": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for k, v in d.items() if isinstance(v, dict))"}
{"task_id": 302, "completion": "def set_Bit_Number(n):\n    msb = 0\n    while n:\n        msb += 1\n        n = n >> 1\n    return msb"}
{"task_id": 303, "completion": "def count_inversions(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"}
{"task_id": 304, "completion": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    \n    for i in range(rotations):\n        left, right = ranges[i]\n        arr = arr[:left] + arr[right+1:] + arr[left:right+1]\n    \n    return arr[index]"}
{"task_id": 305, "completion": "def start_with_p(words):\n    p_words = [word for word in words if word.startswith('p')]\n    pairs = [(p_words[i], p_words[j]) for i in range(len(p_words)) for j in range(i+1, len(p_words))]\n    return pairs"}
{"task_id": 306, "completion": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    \n    for i in range(index+1, k):\n        for j in range(index, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    return max(dp)"}
{"task_id": 307, "completion": "def colon_tuplex(tuplex, m, n):\n    if m < 0 or n >= len(tuplex):\n        return \"Invalid indices\"\n    \n    return tuplex[m:n+1]"}
{"task_id": 308, "completion": "def large_product(nums1, nums2, N):\n    products = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    \n    products.sort(reverse=True)\n    \n    return products[:N]"}
{"task_id": 309, "completion": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": 310, "completion": "def string_to_tuple(str1):\n    # Remove any leading or trailing whitespace\n    str1 = str1.strip()\n    \n    # Split the string by commas\n    elements = str1.split(',')\n    \n    # Convert each element to a tuple\n    tuple1 = tuple(elements)\n    \n    return tuple1"}
{"task_id": 311, "completion": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    \n    mask = 1\n    while n & mask:\n        mask <<= 1\n    \n    return n | mask"}
{"task_id": 312, "completion": "def volume_cone(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"}
{"task_id": 313, "completion": "def pos_nos(list1):\n    for num in list1:\n        if num > 0:\n            print(num)"}
{"task_id": 314, "completion": "def max_sum_rectangular_grid(grid, n):\n    dp = [[0] * n for _ in range(2)]\n    \n    # Initialize the first row of dp\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    \n    for i in range(1, n):\n        # Update the current column based on the previous column\n        dp[0][i] = max(dp[0][i-1], dp[1][i-1] + grid[0][i])\n        dp[1][i] = max(dp[1][i-1], dp[0][i-1] + grid[1][i])\n    \n    # Return the maximum sum from the last column\n    return max(dp[0][n-1], dp[1][n-1])"}
{"task_id": 315, "completion": "def find_Max_Len_Even(s):\n    max_len = 0\n    max_even_word = \"\"\n    \n    words = s.split()\n    \n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_even_word = word\n    \n    return max_even_word"}
{"task_id": 316, "completion": "def find_last_occurrence(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"}
{"task_id": 317, "completion": "def modified_encode(alist):\n    encoded_list = []\n    count = 1\n    for i in range(1, len(alist)):\n        if alist[i] == alist[i-1]:\n            count += 1\n        else:\n            if count > 1:\n                encoded_list.append((count, alist[i-1]))\n            else:\n                encoded_list.append(alist[i-1])\n            count = 1\n    if count > 1:\n        encoded_list.append((count, alist[-1]))\n    else:\n        encoded_list.append(alist[-1])\n    \n    return encoded_list"}
{"task_id": 318, "completion": "def max_volume(s):\n    # The maximum volume of a cuboid is achieved when all sides are equal\n    # Let's assume the sides of the cuboid are a, b, and c\n    # We have the constraint a + b + c = s\n    # We want to maximize the volume V = a * b * c\n\n    # Since a, b, and c are equal, we can rewrite the volume as V = (s/3) * (s/3) * (s/3)\n    # This simplifies to V = (s/3)^3\n\n    # Calculate the maximum volume\n    max_volume = (s/3) ** 3\n\n    return max_volume"}
{"task_id": 319, "completion": "def find_long_word(text):\n    pattern = r'\\b\\w{5}\\b'\n    long_words = re.findall(pattern, text)\n    return long_words"}
{"task_id": 320, "completion": "def sum_difference(n):\n    sum_of_squares = sum([i**2 for i in range(1, n+1)])\n    square_of_sum = sum(range(1, n+1))**2\n    return square_of_sum - sum_of_squares"}
{"task_id": 321, "completion": "def find_demlo(num):\n    num_str = str(num)\n    num_digits = len(num_str)\n    \n    demlo_sum = sum(int(digit) for digit in num_str) ** num_digits\n    \n    return demlo_sum"}
{"task_id": 322, "completion": "def position_min(lst):\n    min_val = min(lst)\n    return [i for i, val in enumerate(lst) if val == min_val]"}
{"task_id": 323, "completion": "def right_rotate(arr, n, out_of_place, cur):\n    # Function to rotate the array to the right by one position\n    def rotate_right(arr, start, end):\n        temp = arr[end]\n        for i in range(end, start, -1):\n            arr[i] = arr[i - 1]\n        arr[start] = temp\n\n    # Move all positive numbers to the end of the array\n    out_of_place = -1\n    for cur in range(n):\n        if out_of_place >= 0:\n            if ((arr[cur] >= 0 and arr[out_of_place] < 0) or\n                    (arr[cur] < 0 and arr[out_of_place] >= 0)):\n                rotate_right(arr, out_of_place, cur)\n                if cur - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if out_of_place == -1:\n            if ((arr[cur] >= 0 and cur % 2 == 0) or\n                    (arr[cur] < 0 and cur % 2 == 1)):\n                out_of_place = cur\n\n    return arr"}
{"task_id": 324, "completion": "def sum_of_alternates(test_tuple):\n    total_sum = 0\n    for i in range(0, len(test_tuple), 2):\n        total_sum += sum(test_tuple[i])\n    return total_sum"}
{"task_id": 325, "completion": "def get_Min_Squares(n):\n    # Create a list to store the minimum number of squares for each number up to n\n    dp = [float('inf')] * (n + 1)\n    \n    # Base case: 0 squares needed for 0\n    dp[0] = 0\n    \n    # Iterate through all numbers up to n\n    for i in range(1, n + 1):\n        # Try all possible squares less than or equal to i\n        j = 1\n        while j*j <= i:\n            dp[i] = min(dp[i], dp[i - j*j] + 1)\n            j += 1\n    \n    return dp[n]"}
{"task_id": 326, "completion": "def most_occurrences(test_list):\n    words = ' '.join(test_list).split()\n    word_counts = Counter(words)\n    most_common_word = max(word_counts, key=word_counts.get)\n    return most_common_word"}
{"task_id": 327, "completion": "def check_isosceles(x, y, z):\n    if x == y or x == z or y == z:\n        print(\"The triangle with side lengths {}, {}, and {} is an isosceles triangle.\".format(x, y, z))\n    else:\n        print(\"The triangle with side lengths {}, {}, and {} is not an isosceles triangle.\".format(x, y, z))"}
{"task_id": 328, "completion": "def rotate_left(lst, m, n):\n    n = n % len(lst)  # Ensure n is within the length of the list\n    return lst[n:] + lst[:n]"}
{"task_id": 329, "completion": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count"}
{"task_id": 330, "completion": "def find_char(text):\n    words = re.findall(r'\\b\\w{3,5}\\b', text)\n    return words"}
{"task_id": 331, "completion": "def count_unset_bits(n):\n    unset_bits = 0\n    while n > 0:\n        if n % 2 == 0:\n            unset_bits += 1\n        n = n // 2\n    return unset_bits"}
{"task_id": 332, "completion": "def char_frequency(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq"}
{"task_id": 333, "completion": "def sort_sublist(sub_li):\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li"}
{"task_id": 334, "completion": "def check_validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return \"The triangle is valid.\"\n    else:\n        return \"The triangle is not valid.\""}
{"task_id": 335, "completion": "def ap_sum(a, n, d):\n    return (n/2) * (2*a + (n-1)*d)"}
{"task_id": 336, "completion": "def check_monthnum(monthname):\n    thirty_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname in thirty_days:\n        return False\n    elif monthname == \"February\":\n        return True\n    else:\n        return True"}
{"task_id": 337, "completion": "import re\n\ndef match_word(text):\n    match = re.search(r'\\b(\\w+)[\\W]*$', text)\n    if match:\n        return match.group(1)\n    else:\n        return None"}
{"task_id": 338, "completion": "def check_equality(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count"}
{"task_id": 339, "completion": "def find_divisor(x, y):\n    def get_divisors(num):\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisor_count = {}\n    for i in range(x, y + 1):\n        divisors = get_divisors(i)\n        for divisor in divisors:\n            if divisor in divisor_count:\n                divisor_count[divisor] += 1\n            else:\n                divisor_count[divisor] = 1\n\n    max_divisor = max(divisor_count, key=divisor_count.get)\n    return max_divisor"}
{"task_id": 340, "completion": "def sum_three_smallest_nums(lst):\n    # Filter out negative numbers and sort the list\n    positive_nums = sorted([num for num in lst if num > 0])\n    \n    # Calculate the sum of the three smallest positive numbers\n    sum_three_smallest = sum(positive_nums[:3])\n    \n    return sum_three_smallest"}
{"task_id": 341, "completion": "def set_to_tuple(s):\n    return tuple(sorted(s))"}
{"task_id": 342, "completion": "def smallest_range(nums):\n    heap = [(row[0], i, 0) for i, row in enumerate(nums)]\n    heapq.heapify(heap)\n    \n    range_start, range_end = float('-inf'), float('inf')\n    max_val = max(row[0] for row in nums)\n    \n    while True:\n        min_val, i, j = heapq.heappop(heap)\n        \n        if max_val - min_val < range_end - range_start:\n            range_start, range_end = min_val, max_val\n        \n        if j == len(nums[i]) - 1:\n            break\n        \n        next_val = nums[i][j+1]\n        max_val = max(max_val, next_val)\n        heapq.heappush(heap, (next_val, i, j+1))\n    \n    return range_start, range_end"}
{"task_id": 343, "completion": "def dig_let(s):\n    num_digits = sum(c.isdigit() for c in s)\n    num_letters = sum(c.isalpha() for c in s)\n    \n    return num_digits, num_letters"}
{"task_id": 344, "completion": "import math\n\ndef count_Odd_Squares(n, m):\n    count = 0\n    for i in range(n, m+1):\n        if math.isqrt(i) ** 2 == i:\n            count += 1\n    return count"}
{"task_id": 345, "completion": "def diff_consecutivenums(nums):\n    differences = []\n    for i in range(len(nums) - 1):\n        diff = nums[i+1] - nums[i]\n        differences.append(diff)\n    return differences"}
{"task_id": 346, "completion": " but I couldn't find any code for the function `zigzag(n, k)` in the provided text. Could you please provide the code snippet or more context so I can assist you bet"}
{"task_id": 347, "completion": "def count_squares(m, n):\n    if m == 0 or n == 0:\n        return 0\n    if m == n:\n        return m\n    if m < n:\n        return count_squares(m, n - m) + count_squares(m, m)\n    if m > n:\n        return count_squares(m - n, n) + count_squares(n, n)"}
{"task_id": 348, "completion": "def bin_coff(n, r):\n    dp = [[0 for _ in range(r+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n\n    for i in range(1, n+1):\n        for j in range(r+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= i:\n                dp[i][j] += dp[i][j-i]\n\n    return dp[n][r]"}
{"task_id": 349, "completion": "def check_binary_string(string):\n    for char in string:\n        if char != '0' and char != '1':\n            return False\n    return True"}
{"task_id": 350, "completion": "def minimum_length(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    min_length = len(s)\n    for char in char_count:\n        new_length = len(s) - char_count[char]\n        min_length = min(min_length, new_length)\n\n    return min_length"}
{"task_id": 351, "completion": "def first_Element(arr, n, k):\n    freq = {}\n    \n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n        \n        if freq[arr[i]] == k:\n            return arr[i]\n    \n    return None"}
{"task_id": 352, "completion": "def unique_characters(str):\n    # Create an empty set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the string\n    for char in str:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n    \n    # If all characters are unique, return True\n    return True"}
{"task_id": 353, "completion": "def remove_column(nested_list, n):\n    for row in nested_list:\n        if len(row) > n:\n            del row[n]\n    return nested_list"}
{"task_id": 354, "completion": "def tn_ap(a, n, d):\n    return a + (n - 1) * d"}
{"task_id": 355, "completion": "def count_Rectangles(radius):\n    num_rectangles = (2 * radius + 1) * (radius + 1) * radius\n    return num_rectangles"}
{"task_id": 356, "completion": "def find_angle(a, b):\n    # Calculate the third angle\n    c = 180 - a - b\n    return c"}
{"task_id": 357, "completion": "def find_max(test_list):\n    max_element = float('-inf')\n    for record in test_list:\n        for element in record:\n            if element > max_element:\n                max_element = element\n    return max_element"}
{"task_id": 358, "completion": "def moddiv_list(nums1, nums2):\n    result = list(map(lambda x, y: x % y, nums1, nums2))\n    return result"}
{"task_id": 359, "completion": "def check_solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return \"No real roots\"\n    \n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    \n    if root1 == 2*root2 or root2 == 2*root1:\n        return \"One root is twice of the other\"\n    else:\n        return \"One root is not twice of the other\"\n`"}
{"task_id": 360, "completion": "def get_carol(n):\n    carol_number = 2**n - 1\n    return carol_number"}
{"task_id": 361, "completion": "def remove_empty(list1):\n    return [lst for lst in list1 if lst]"}
{"task_id": 362, "completion": "def max_occurrences(nums):\n    max_count = 0\n    max_item = None\n    \n    for item in nums:\n        count = nums.count(item)\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"}
{"task_id": 363, "completion": "def add_K_element(test_list, K):\n    result = []\n    for element in test_list:\n        new_element = tuple([x + K for x in element])\n        result.append(new_element)\n    return result"}
{"task_id": 364, "completion": "def make_flip(ch):\n    flips = 0\n    for i in range(len(ch)):\n        if i % 2 == 0 and ch[i] != '0':\n            flips += 1\n        elif i % 2 == 1 and ch[i] != '1':\n            flips += 1\n    return flips"}
{"task_id": 365, "completion": "def count_Digit(n):\n    count = 0\n    while n != 0:\n        n = n // 10\n        count += 1\n    return count"}
{"task_id": 366, "completion": "def adjacent_num_product(list_nums):\n    max_product = float('-inf')\n    \n    for i in range(len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    \n    return max_product"}
{"task_id": 367, "completion": "def is_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        \n        left_height = check_height(node.left)\n        right_height = check_height(node.right)\n        \n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        \n        return 1 + max(left_height, right_height)\n    \n    return check_height(root) != -1"}
{"task_id": 368, "completion": "def repeat_tuples(test_tup, N):\n    return test_tup * N"}
{"task_id": 369, "completion": "def lateral_surface_cuboid(length, width, height):\n    lateral_surface_area = 2 * (length * height + width * height)\n    return lateral_surface_area"}
{"task_id": 370, "completion": "def float_sort(tup):\n    sorted_tup = sorted(tup, key=lambda x: float(x))\n    return sorted_tup"}
{"task_id": 371, "completion": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    \n    mid = left_element + (right_element - left_element) // 2\n    \n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)"}
{"task_id": 372, "completion": "def heap_ascending(nums):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    sorted_nums = []\n    while heap:\n        sorted_nums.append(heapq.heappop(heap))\n    \n    return sorted_nums"}
{"task_id": 373, "completion": "def volume_cuboid(l, w, h):\n    volume = l * w * h\n    return volume"}
{"task_id": 374, "completion": "def permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    for perm in perms:\n        print(perm)"}
{"task_id": 375, "completion": "def round_num(n, m):\n    return round(n / m) * m"}
{"task_id": 376, "completion": "def remove_replica(test_tup, custom_value):\n    seen = set()\n    result = []\n    \n    for item in test_tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n        else:\n            result.append(custom_value)\n    \n    return tuple(result)"}
{"task_id": 377, "completion": "def remove_Char(s, c):\n    return s.replace(c, '')"}
{"task_id": 378, "completion": "def move_first(test_list):\n    if test_list:\n        test_list.insert(0, test_list.pop())\n    return test_list"}
{"task_id": 379, "completion": "def surfacearea_cuboid(l, w, h):\n    # Calculate the surface area of a cuboid\n    area = 2 * (l * w + w * h + h * l)\n    return area"}
{"task_id": 380, "completion": "def multi_list(rownum, colnum):\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]"}
{"task_id": 381, "completion": "def index_on_inner_list(list_data, index_no):\n    sorted_list = sorted(list_data, key=lambda x: x[index_no])\n    return sorted_list"}
{"task_id": 382, "completion": "def find_rotation_count(arr):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n\n        mid = (low + high) // 2\n        next_mid = (mid + 1) % len(arr)\n        prev_mid = (mid + len(arr) - 1) % len(arr)\n\n        if arr[mid] <= arr[next_mid] and arr[mid] <= arr[prev_mid]:\n            return mid\n        elif arr[mid] <= arr[high]:\n            high = mid - 1\n        elif arr[mid] >= arr[low]:\n            low = mid + 1\n\n    return -1"}
{"task_id": 383, "completion": "def even_bit_toggle_number(n):\n    # Mask to toggle all odd bits\n    mask = 0xAAAAAAAA  # 10101010101010101010101010101010 in binary\n    \n    # Toggle all odd bits of the number\n    result = n ^ mask\n    \n    return result"}
{"task_id": 384, "completion": "def frequency_of_smallest(n, arr):\n    if n == 0:\n        return 0\n    \n    min_val = min(arr)\n    return arr.count(min_val)"}
{"task_id": 385, "completion": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)"}
{"task_id": 386, "completion": "def swap_count(s):\n    stack = []\n    swaps = 0\n\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n        elif char == ']':\n            swaps += 1\n\n    return swaps // 2"}
{"task_id": 387, "completion": "def even_or_odd(N):\n    decimal_number = int(N, 16)\n    \n    if decimal_number % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""}
{"task_id": 388, "completion": "def highest_power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)"}
{"task_id": 389, "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": 390, "completion": "def add_string(lst, string):\n    return [string + item for item in lst]"}
{"task_id": 391, "completion": "def convert_list_dictionary(l1, l2, l3):\n    nested_dict = {}\n    \n    for key1, value1 in zip(l1, l2):\n        nested_dict[key1] = {}\n        for key2, value2 in zip(value1, l3):\n            nested_dict[key1][key2] = value2\n    \n    return nested_dict"}
{"task_id": 392, "completion": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    \n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        \n        if n == 1:\n            return 1\n        \n        memo[n] = max(n, helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5))\n        \n        return memo[n]\n    \n    return helper(n)"}
{"task_id": 393, "completion": "def max_length_list(input_list):\n    max_length = max(input_list, key=lambda x: len(x))\n    return max_length"}
{"task_id": 394, "completion": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))"}
{"task_id": 395, "completion": "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"task_id": 396, "completion": "import re\n\ndef check_char(string):\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"}
{"task_id": 397, "completion": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    \n    return median"}
{"task_id": 398, "completion": "def sum_of_digits(nums):\n    result = []\n    for num in nums:\n        sum_digits = sum(int(digit) for digit in str(num))\n        result.append(sum_digits)\n    return result"}
{"task_id": 399, "completion": "def bitwise_xor(test_tup1, test_tup2):\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 400, "completion": "def extract_freq(test_list):\n    freq_dict = Counter(tuple(sorted(sublist)) for sublist in test_list)\n    return freq_dict"}
{"task_id": 401, "completion": "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        temp = tuple(x + y for x, y in zip(tup1, tup2))\n        result.append(temp)\n    return tuple(result)"}
{"task_id": 402, "completion": "def ncr_modp(n, r, p):\n    if r == 0:\n        return 1\n\n    # Precompute factorials\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n\n    # Compute nCr % p using factorials\n    num = fact[n]\n    den = (fact[r] * fact[n - r]) % p\n\n    # Compute modular inverse of den\n    def mod_inv(a, m):\n        m0, x0, x1 = m, 0, 1\n        while a > 1:\n            q = a // m\n            m, a = a % m, m\n            x0, x1 = x1 - q * x0, x0\n        return x1 + m0 if x1 < 0 else x1\n\n    den_inv = mod_inv(den, p)\n\n    return (num * den_inv) % p"}
{"task_id": 403, "completion": "def is_valid_URL(url):\n    regex = r\"^(http|https)://[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+(/[a-zA-Z0-9-._~:/?#[\\]@!$&'()*+,;=]*)?$\"\n    \n    if re.match(regex, url):\n        return True\n    else:\n        return False"}
{"task_id": 404, "completion": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": 405, "completion": "def check_tuplex(tuplex, element):\n    return element in tuplex"}
{"task_id": 406, "completion": "def find_parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""}
{"task_id": 407, "completion": "def rearrange_bigger(n):\n    num_list = list(str(n))\n    \n    # Find the first digit from the right that is smaller than the digit on its right\n    i = len(num_list) - 2\n    while i >= 0 and num_list[i] >= num_list[i + 1]:\n        i -= 1\n    \n    if i == -1:\n        return \"Not possible\"\n    \n    # Find the smallest digit on the right side of num_list[i] that is greater than num_list[i]\n    j = len(num_list) - 1\n    while num_list[j] <= num_list[i]:\n        j -= 1\n    \n    # Swap the digits at positions i and j\n    num_list[i], num_list[j] = num_list[j], num_list[i]\n    \n    # Reverse the digits to the right of i\n    num_list[i+1:] = num_list[i+1:][::-1]\n    \n    next_bigger_num = int(\"\".join(num_list))\n    \n    return next_bigger_num"}
{"task_id": 408, "completion": "def k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair_sum = num1 + num2\n            heapq.heappush(heap, (pair_sum, num1, num2))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        pair_sum, num1, num2 = heapq.heappop(heap)\n        result.append([num1, num2])\n    \n    return result"}
{"task_id": 409, "completion": "def min_product_tuple(list1):\n    min_product = float('inf')\n    \n    for tup in list1:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    \n    return min_product"}
{"task_id": 410, "completion": "def min_val(listval):\n    min_value = None\n    for item in listval:\n        if min_value is None or item < min_value:\n            min_value = item\n    return min_value"}
{"task_id": 411, "completion": "def snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)"}
{"task_id": 412, "completion": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]"}
{"task_id": 413, "completion": "def extract_nth_element(list1, n):\n    return [item[n] for item in list1]"}
{"task_id": 414, "completion": "def overlapping(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False"}
{"task_id": 415, "completion": "def max_product(arr):\n    if len(arr) < 2:\n        return \"Array should have at least 2 elements\"\n    \n    max_product = float('-inf')\n    pair = ()\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    \n    return pair"}
{"task_id": 416, "completion": "def breakSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    max_sum = 0\n    for i in range(1, n):\n        max_sum = max(max_sum, i * (n - i), i * breakSum(n - i))\n\n    return max_sum"}
{"task_id": 417, "completion": "def group_tuples(input_list):\n    if not input_list:\n        return None\n    \n    first_elements = set(input_list[0][0])\n    for tup in input_list[1:]:\n        first_elements.intersection_update(set(tup[0]))\n    \n    return first_elements"}
{"task_id": 418, "completion": "def find_max(lst):\n    max_length = 0\n    max_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    \n    return max_sublist"}
{"task_id": 419, "completion": "def round_and_sum(list1):\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)"}
{"task_id": 420, "completion": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**3\n    return sum"}
{"task_id": 421, "completion": "def concatenate_tuple(test_tup, delimiter):\n    concatenated_string = delimiter.join(map(str, test_tup))\n    return concatenated_string"}
{"task_id": 422, "completion": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return \"Please enter a positive integer for n.\"\n    \n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    average = sum_of_cubes / n\n    \n    return average"}
{"task_id": 423, "completion": "def get_maxgold(gold, m, n):\n    # Create a 2D list to store the maximum gold collected at each cell\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    # Fill the dp table starting from the rightmost column\n    for j in range(n-1, -1, -1):\n        for i in range(m):\n            right = dp[i][j+1] if j+1 < n else 0\n            right_up = dp[i-1][j+1] if i-1 >= 0 and j+1 < n else 0\n            right_down = dp[i+1][j+1] if i+1 < m and j+1 < n else 0\n\n            dp[i][j] = gold[i][j] + max(right, right_up, right_down)\n\n    # Find the maximum gold collected in the first column\n    max_gold = 0\n    for i in range(m):\n        max_gold = max(max_gold, dp[i][0])\n\n    return max_gold"}
{"task_id": 424, "completion": "def extract_rear(test_tuple):\n    rear_elements = [s[-1] for s in test_tuple if isinstance(s, str) and len(s) > 0]\n    return rear_elements"}
{"task_id": 425, "completion": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"}
{"task_id": 426, "completion": "def filter_oddnumbers(nums):\n    odd_numbers = list(filter(lambda x: x % 2 != 0, nums))\n    return odd_numbers"}
{"task_id": 427, "completion": "def change_date_format(dt):\n    # Define the regex pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use re.sub() to replace the matched pattern with the desired format\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    \n    return new_dt"}
{"task_id": 428, "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": 429, "completion": "def and_tuples(test_tup1, test_tup2):\n    result = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 430, "completion": "def parabola_directrix(a, b, c):\n    directrix = c - (b**2 - 1)/(4*a)\n    return directrix"}
{"task_id": 431, "completion": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False"}
{"task_id": 432, "completion": "def median_trapezium(base1, base2, height):\n    median = (base1 + base2) / 2\n    return median"}
{"task_id": 433, "completion": "def check_greater(arr, number):\n    for element in arr:\n        if number <= element:\n            return False\n    return True"}
{"task_id": 434, "completion": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'ab+')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 435, "completion": "def last_digit(n):\n    return n % 10"}
{"task_id": 436, "completion": "def neg_nos(list1):\n    for num in list1:\n        if num < 0:\n            print(num)"}
{"task_id": 437, "completion": "def remove_odd(str1):\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])"}
{"task_id": 438, "completion": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"}
{"task_id": 439, "completion": "def multiple_to_single(L):\n    result = int(''.join(map(str, L)))\n    return result"}
{"task_id": 440, "completion": "def find_adverb_position(text):\n    nlp = spacy.load(\"en_core_web_sm\")\n    doc = nlp(text)\n    \n    adverbs = [(token.text, token.idx) for token in doc if token.pos_ == \"ADV\"]\n    \n    return adverbs"}
{"task_id": 441, "completion": "def surfacearea_cube(l):\n    surface_area = 6 * (l ** 2)\n    return surface_area"}
{"task_id": 442, "completion": "def positive_count(nums):\n    if not nums:\n        return 0\n    \n    positive_nums = [num for num in nums if num > 0]\n    ratio = len(positive_nums) / len(nums)\n    \n    return ratio"}
{"task_id": 443, "completion": "def largest_neg(lst):\n    neg_nums = [num for num in lst if num < 0]\n    \n    if not neg_nums:\n        return \"No negative numbers found in the list.\"\n    \n    return max(neg_nums)"}
{"task_id": 444, "completion": "def trim_tuple(test_list, K):\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(val[:K] for val in tup)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"}
{"task_id": 445, "completion": "def index_multiplication(test_tup1, test_tup2):\n    result = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 446, "completion": "def count_occurrence(tup, lst):\n    count_dict = {}\n    \n    for item in lst:\n        count_dict[item] = tup.count(item)\n    \n    return count_dict"}
{"task_id": 447, "completion": "cube_nums = lambda nums: list(map(lambda x: x**3, nums))"}
{"task_id": 448, "completion": "def cal_sum(n):\n    if n < 0:\n        return \"Invalid input. Please provide a non-negative integer.\"\n    \n    perrin_sum = sum(perrin(i) for i in range(n))\n    return perrin_sum"}
{"task_id": 449, "completion": "def check_triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the lengths of the sides of the triangle using the distance formula\n    side1 = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    side2 = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    side3 = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    \n    # Check if the sum of any two sides is greater than the third side for it to be a valid triangle\n    if side1 + side2 > side3 and side2 + side3 > side1 and side1 + side3 > side2:\n        return \"Valid Triangle\"\n    else:\n        return \"Invalid Triangle\""}
{"task_id": 450, "completion": "def extract_string(strings, size):\n    extracted_strings = [s for s in strings if len(s) == size]\n    return extracted_strings"}
{"task_id": 451, "completion": "def remove_whitespaces(text):\n    return re.sub(r'\\s+', '', text)"}
{"task_id": 452, "completion": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None"}
{"task_id": 453, "completion": "def sumofFactors(n):\n    sum_factors = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_factors += i\n    return sum_factors"}
{"task_id": 454, "completion": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 455, "completion": "def check_monthnumb_number(monthnum):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    \n    if monthnum in thirty_one_days_months:\n        return True\n    else:\n        return False"}
{"task_id": 456, "completion": "def reverse_string_list(stringlist):\n    reversed_list = [string[::-1] for string in stringlist]\n    return reversed_list"}
{"task_id": 457, "completion": "def find_min(lst):\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"}
{"task_id": 458, "completion": "def rectangle_area(length, breadth):\n    area = length * breadth\n    return area"}
{"task_id": 459, "completion": "def remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)"}
{"task_id": 460, "completion": "def extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": 461, "completion": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": 462, "completion": "def combinations_list(list1):\n    return list(itertools.chain.from_iterable(itertools.combinations(list1, r) for r in range(1, len(list1)+1)))"}
{"task_id": 463, "completion": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": 464, "completion": "def check_value(dict, n):\n    values = list(dict.values())\n    return all(value == values[0] for value in values)"}
{"task_id": 465, "completion": "def drop_empty(input_dict):\n    return {key: value for key, value in input_dict.items() if value}"}
{"task_id": 466, "completion": "def find_peak_util(arr, low, high, n):\n    mid = low + (high - low) // 2\n    \n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, mid - 1, n)\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\ndef find_peak(arr):\n    n = len(arr)\n    return arr[find_peak_util(arr, 0, n - 1, n)]\n`"}
{"task_id": 467, "completion": "def decimal_to_octal(deciNum):\n    octalNum = oct(deciNum).replace(\"0o\", \"\")\n    return octalNum"}
{"task_id": 468, "completion": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    \n    max_product = 0\n    dp = [0] * n\n    \n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        \n        max_product = max(max_product, dp[i])\n    \n    return max_product"}
{"task_id": 469, "completion": "def max_profit(prices, k):\n    n = len(prices)\n    if n < 2:\n        return 0\n    \n    if k >= n // 2:\n        # If k is large enough, we can perform as many transactions as we want\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i - 1]:\n                max_profit += prices[i] - prices[i - 1]\n        return max_profit\n    \n    # Initialize dp array\n    dp = [[0] * n for _ in range(k + 1)]\n    \n    for i in range(1, k + 1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n    \n    return dp[k][n - 1]"}
{"task_id": 470, "completion": "def add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup[0])):\n        result.append(test_tup[0][i] + test_tup[1][i])\n    return tuple(result)"}
{"task_id": 471, "completion": "def find_remainder(arr, lens, n):\n    result = 1\n    for i in range(lens):\n        result = (result * arr[i]) % n\n    return result"}
{"task_id": 472, "completion": "def check_Consecutive(l):\n    sorted_list = sorted(l)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] + 1 != sorted_list[i + 1]:\n            return False\n    return True"}
{"task_id": 473, "completion": "def tuple_intersection(test_list1, test_list2):\n    set1 = set([tuple(sorted(t)) for t in test_list1])\n    set2 = set([tuple(sorted(t)) for t in test_list2])\n    \n    intersection = set1.intersection(set2)\n    \n    return [list(t) for t in intersection]"}
{"task_id": 474, "completion": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)"}
{"task_id": 475, "completion": "def sort_counter(counter_dict):\n    sorted_counter = dict(sorted(counter_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"}
{"task_id": 476, "completion": "def big_sum(nums):\n    if not nums:\n        return 0\n    \n    min_val = min(nums)\n    max_val = max(nums)\n    \n    return min_val + max_val"}
{"task_id": 477, "completion": "def convert_to_lower(string):\n    return string.lower()"}
{"task_id": 478, "completion": "def remove_lowercase(input_str):\n    result = ''\n    start = 0\n    for i in range(len(input_str)):\n        if input_str[i].islower():\n            if start < i:\n                result += input_str[start:i]\n            start = i + 1\n    if start < len(input_str):\n        result += input_str[start:]\n    return result"}
{"task_id": 479, "completion": "def first_digit(n):\n    while n >= 10:\n        n = n // 10\n    return n"}
{"task_id": 480, "completion": "def get_max_occuring_char(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_char = max(char_count, key=char_count.get)\n    \n    return max_char"}
{"task_id": 481, "completion": "def is_subset_sum(arr, n, target_sum):\n    dp = [[False for _ in range(target_sum + 1)] for _ in range(n + 1)]\n    \n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    \n    return dp[n][target_sum]\n`"}
{"task_id": 482, "completion": "def find_sequences(text):\n    pattern = r'[A-Z][a-z]+'\n    sequences = re.findall(pattern, text)\n    return sequences"}
{"task_id": 483, "completion": "def first_Factorial_Divisible_Number(x):\n    n = 1\n    while True:\n        factorial = math.factorial(n)\n        if factorial % x == 0:\n            return n\n        n += 1"}
{"task_id": 484, "completion": "def remove_matching_tuple(test_list1, test_list2):\n    result_list1 = [tup for tup in test_list1 if tup not in test_list2]\n    result_list2 = [tup for tup in test_list2 if tup not in test_list1]\n    \n    return result_list1, result_list2"}
{"task_id": 485, "completion": "def find_largest_palindrome(arr):\n    largest_palindrome = None\n    for num in arr:\n        if is_palindrome(num):\n            if largest_palindrome is None or num > largest_palindrome:\n                largest_palindrome = num\n    return largest_palindrome"}
{"task_id": 486, "completion": "def binomial_probability(n, r, p):\n    return nCr(n, r) * (p ** r) * ((1 - p) ** (n - r))"}
{"task_id": 487, "completion": "def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])"}
{"task_id": 488, "completion": "def area_pentagon(a):\n    area = (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a**2\n    return area"}
{"task_id": 489, "completion": "def frequency_of_largest(n, arr):\n    if n == 0:\n        return 0\n    \n    max_val = max(arr)\n    frequency = arr.count(max_val)\n    \n    return frequency"}
{"task_id": 490, "completion": "def extract_symmetric(test_list):\n    symmetric_pairs = []\n    \n    for pair in test_list:\n        if (pair[1], pair[0]) in test_list:\n            symmetric_pairs.append(pair)\n    \n    return symmetric_pairs"}
{"task_id": 491, "completion": "def sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)"}
{"task_id": 492, "completion": "def binary_search(item_list, item):\n    left = 0\n    right = len(item_list) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] < item:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"}
{"task_id": 493, "completion": "def calculate_polygons(startx, starty, endx, endy, radius):\n    hexagons = []\n    side_length = radius * math.sqrt(3)\n    x_offset = 3/2 * radius\n    y_offset = 2 * radius\n\n    for y in range(starty, endy, int(y_offset)):\n        for x in range(startx, endx, int(x_offset)):\n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i\n                angle_rad = math.radians(angle_deg)\n                x_coord = x + radius * math.cos(angle_rad)\n                y_coord = y + radius * math.sin(angle_rad)\n                hexagon.append((x_coord, y_coord))\n            hexagons.append(hexagon)\n\n    return hexagons"}
{"task_id": 494, "completion": "def binary_to_integer(test_tup):\n    binary_str = ''.join(str(bit) for bit in test_tup)\n    return int(binary_str, 2)"}
{"task_id": 495, "completion": "def remove_lowercase(str1):\n    return re.sub(r'[a-z]+', '', str1)"}
{"task_id": 496, "completion": "import heapq\n\ndef heap_queue_smallest(nums, n):\n    if n <= 0:\n        return []\n    \n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n    \n    smallest_integers = []\n    for _ in range(n):\n        smallest_integers.append(heapq.heappop(min_heap))\n    \n    return smallest_integers"}
{"task_id": 497, "completion": "import math\n\ndef surfacearea_cone(r, h):\n    surface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return surface_area"}
{"task_id": 498, "completion": "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x"}
{"task_id": 499, "completion": "def diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter"}
{"task_id": 500, "completion": "def concatenate_elements(lst):\n    concatenated_string = ''.join(map(str, lst))\n    return concatenated_string"}
{"task_id": 501, "completion": "def ngcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x"}
{"task_id": 502, "completion": "def find_remainder(n, m):\n    return n % m"}
{"task_id": 503, "completion": "def add_consecutive_nums(nums):\n    total = 0\n    for i in range(len(nums) - 1):\n        total += nums[i] + nums[i+1]\n    return total"}
{"task_id": 504, "completion": "def sum_of_series(n):\n    if n < 1:\n        return \"Please enter a positive integer.\"\n\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n\n    return cube_sum"}
{"task_id": 505, "completion": "def re_order(A):\n    non_zero_index = 0\n    \n    # Move all non-zero elements to the front of the array\n    for i in range(len(A)):\n        if A[i] != 0:\n            A[non_zero_index] = A[i]\n            non_zero_index += 1\n    \n    # Fill the rest of the array with zeroes\n    for i in range(non_zero_index, len(A)):\n        A[i] = 0\n    \n    return A"}
{"task_id": 506, "completion": "def permutation_coefficient(n, k):\n    if n < k:\n        return \"Invalid input: n should be greater than or equal to k\"\n    else:\n        return factorial(n) // factorial(n - k)"}
{"task_id": 507, "completion": "def remove_words(list1, removewords):\n    return [word for word in list1 if word not in removewords]"}
{"task_id": 508, "completion": "def same_order(l1, l2):\n    common_elements = set(l1) & set(l2)\n    \n    if not common_elements:\n        return False\n    \n    index_l1 = [l1.index(elem) for elem in common_elements]\n    index_l2 = [l2.index(elem) for elem in common_elements]\n    \n    return index_l1 == index_l2"}
{"task_id": 509, "completion": "def average_Odd(n):\n    if n % 2 == 0:\n        n -= 1  # Adjust n to the nearest odd number if it's even\n    odd_numbers = [i for i in range(1, n+1, 2)]  # Generate a list of odd numbers up to n\n    average = sum(odd_numbers) / len(odd_numbers)\n    return average"}
{"task_id": 510, "completion": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    count = 0\n\n    def backtrack(start, product):\n        nonlocal count\n        if product < k:\n            count += 1\n        else:\n            return\n\n        for i in range(start, n):\n            if product * arr[i] < k:\n                backtrack(i + 1, product * arr[i])\n\n    backtrack(0, 1)\n    return count"}
